;;; Load files for the program
;; For the files to load correctly, the Lisp environment's load path must be set to the directory of the project
(load (merge-pathnames "program.lisp" *load-truename*))

(clear-all)

(define-model jameson

(sgp :v t :esc nil :lf 0.4 :bll 0.5 :ans 0.5 :rt 0 :ncnar nil :show-focus t :trace-detail low)

  
;; PRODUCTIONS - let's try to keep them organized
;; GENERAL

(chunk-type position pos-x pos-y)
(chunk-type environment jameson-position oldest-position middle-position newest-position state)
(chunk-type projectile id environment)
(chunk-type estimation dx dy y action)

(add-dm
  (goal isa environment)(attended)(attending)(done)(pos-encoded)
  (pos1-encoded)(pos2-encoded)(pos3-encoded)(estimate)(retrieving))



;; VISUAL-MODULE PRODUCTION

(P attend-projectile
   =goal>
      ISA         environment
	  state				nil
   =visual-location>
   		screen-x				=pos-x
   		screen-y				=pos-y
   ?visual>
      state       free
   ?imaginal>
   		state				free
   
==>
   +visual>
      cmd         move-attention
      screen-pos  =visual-location
   =goal>
      state       nil
   +imaginal>
   		isa					position
   		pos-x				=pos-x
   		pos-y				=pos-y
)


(P encode-trajectory-one
		=goal>
			isa						environment
			state	nil
		?imaginal>
			buffer				full
		=imaginal>
		?manual>
			state					free
==>
		=goal>
			oldest-position			=imaginal
			state	pos1-encoded
   	+manual>
  		cmd       	  press-key
  		key       	  "s"
  	+imaginal>
  	
)
(P encode-trajectory-two
		=goal>
			isa						environment
			state	pos1-encoded
		?imaginal>
			buffer				full
		=imaginal>
		?manual>
			state					free
==>
		=goal>
			middle-position			=imaginal
			state	pos2-encoded
		+imaginal>
   	+manual>
  		cmd       	  press-key
  		key       	  "s"
)
(P encode-trajectory-three
		=goal>
			isa						environment
			state	pos2-encoded
		?imaginal>
			buffer 				full
		=imaginal>
		?manual>
			state 				free
==>
		=goal>
			newest-position		  =imaginal
			state  estimate
   	+manual>
  		cmd    	     press-key
  		key    	     "s"
  	+imaginal>
  	
)
(P estimate-course
		=goal>
			isa						environment
			state	estimate		
			jameson-position			=j
			middle-position				=p2
			newest-position				=p3
			
==>
		!output!				"Estimating trajectory"
		=goal>
			state	retrieving
		+retrieval>
			isa				estimation
			dx= - (slot-value p3 'pos-x) (slot-value p2 'pos-x)
			dy= - (slot-value p3 'pos-y) (slot-value p2 'pos-y) 
			y=(slot-value j 'pos-y)
)

;; Information retireval productions
;; Not tested

(P remmeber-situation
    =goal>
     isa    environment
     state     retrieving
    =retireval>
     isa    estimation
     action =act
    ?manual>
     state free
   ==>
    =goal>
      state nil
    +manual>
     cmd press-key
     key =act
     
    @retrieval>)

(P cant-remember-up
    =goal>
      isa environment
      state retrieving
	  jameson-position		=j
    ?retrieval>
      buffer failure
	=retireval>
      = y (+ (slot-value j 'pos-y) dy)
      <= dy 0
    ?manual>
      state free
   ==>
     =goal>
       state nil
     +manual>
       cmd press-key
       key "u")

(P cant-remember-down
    =goal>
      isa environment
      state retrieving
	  jameson-position		=j
    ?retrieval>
      buffer failure
	=retireval>
      = y (+ (slot-value j 'pos-y) dy)
      > dy 0
    ?manual>
      state free
   ==>
     =goal>
       state nil
     +manual>
       cmd press-key
       key "d")

(P cant-remember-stay
    =goal>
      isa environment
      state retrieving
	  jameson-position		=j
    ?retrieval>
      buffer failure
	=retireval>
      - y  (+ (slot-value j 'pos-y) dy)
    ?manual>
      state free
   ==>
     =goal>
       state nil
     +manual>
       cmd press-key
       key "s")			
			

(set-all-base-levels 100000 -1000)
(goal-focus goal)
)
